using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Avalonia;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;
using VelloSharp;
using VelloSharp.Avalonia.Vello.Rendering;
using VelloSharp.Text;

namespace AvaloniaVelloPlayground.Services.Scripting;

public sealed class ScriptCompiler
{
    private static readonly string[] Imports =
    [
        "System",
        "System.Buffers",
        "System.Collections.Generic",
        "System.Diagnostics",
        "System.Globalization",
        "System.Linq",
        "System.Numerics",
        "Avalonia",
        "Avalonia.Media",
        "Avalonia.Platform",
        "VelloSharp",
        "VelloSharp.Avalonia.Vello.Rendering",
        "VelloSharp.Text",
        "AvaloniaVelloPlayground.Services",
        "AvaloniaVelloPlayground.Services.Scripting",
    ];

    private readonly ScriptOptions _options;

    public ScriptCompiler()
    {
        var references = new HashSet<Assembly>
        {
            typeof(object).Assembly,
            typeof(Scene).Assembly,
            typeof(IVelloApiLease).Assembly,
            typeof(Matrix).Assembly,
            typeof(VelloSharp.Brush).Assembly,
            typeof(PathBuilder).Assembly,
            typeof(WgpuDevice).Assembly,
            typeof(ScriptRenderContext).Assembly,
            typeof(VelloTextShaperCore).Assembly,
        };

        _options = ScriptOptions.Default
            .WithEmitDebugInformation(false)
            .WithOptimizationLevel(OptimizationLevel.Release)
            .AddReferences(references.ToArray())
            .WithImports(Imports);
    }

    public async Task<ScriptCompilationResult> CompileAsync(
        string userSource,
        string scriptName,
        CancellationToken cancellationToken = default)
    {
        var generated = GenerateSource(userSource ?? string.Empty);
        var script = CSharpScript.Create<Action<ScriptRenderContext>>(generated, _options);
        var diagnostics = script.Compile();
        var mappedDiagnostics = diagnostics
            .Select(MapDiagnostic)
            .ToArray();

        if (mappedDiagnostics.Any(d => d.IsError))
        {
            return new ScriptCompilationResult(null, mappedDiagnostics, generated);
        }

        try
        {
            var runner = script.CreateDelegate();
            var render = await runner(null, cancellationToken).ConfigureAwait(false);
            if (render is null)
            {
                throw new InvalidOperationException("The script did not return a render delegate.");
            }

            var execution = new ScriptExecution(scriptName, render, generated);
            return new ScriptCompilationResult(execution, mappedDiagnostics, generated);
        }
        catch (CompilationErrorException ex)
        {
            var errors = ex.Diagnostics.Select(MapDiagnostic).ToArray();
            return new ScriptCompilationResult(null, errors, generated);
        }
    }

    private static ScriptDiagnostic MapDiagnostic(Diagnostic diagnostic)
    {
        var line = default(int?);
        var column = default(int?);

        if (diagnostic.Location is { IsInSource: true })
        {
            var linePosition = diagnostic.Location.GetLineSpan().StartLinePosition;
            line = linePosition.Line + 1;
            column = linePosition.Character + 1;
        }

        return new ScriptDiagnostic(
            diagnostic.Id,
            diagnostic.Severity,
            diagnostic.ToString(),
            line,
            column);
    }

    private static string GenerateSource(string userSource)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("// Generated by VelloSharp playground script compiler.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();

        foreach (var import in Imports)
        {
            builder.Append("using ");
            builder.Append(import);
            builder.AppendLine(";");
        }

        builder.AppendLine("using FillRule = VelloSharp.FillRule;");
        builder.AppendLine("using RgbaColor = VelloSharp.RgbaColor;");
        builder.AppendLine("using SolidColorBrush = VelloSharp.SolidColorBrush;");
        builder.AppendLine("using PenikoBrush = VelloSharp.PenikoBrush;");
        builder.AppendLine("using GradientStop = VelloSharp.GradientStop;");
        builder.AppendLine("using PathBuilder = VelloSharp.PathBuilder;");
        builder.AppendLine("using LayerBlend = VelloSharp.LayerBlend;");
        builder.AppendLine("using LayerMix = VelloSharp.LayerMix;");
        builder.AppendLine("using LayerCompose = VelloSharp.LayerCompose;");
        builder.AppendLine("using StrokeStyle = VelloSharp.StrokeStyle;");
        builder.AppendLine("using WgpuColor = VelloSharp.WgpuColor;");
        builder.AppendLine("using WgpuRenderPassDescriptor = VelloSharp.WgpuRenderPassDescriptor;");
        builder.AppendLine("using WgpuRenderPassColorAttachment = VelloSharp.WgpuRenderPassColorAttachment;");
        builder.AppendLine("using WgpuLoadOp = VelloSharp.WgpuLoadOp;");
        builder.AppendLine("using WgpuStoreOp = VelloSharp.WgpuStoreOp;");
        builder.AppendLine();

        builder.AppendLine();
        builder.AppendLine("Action<ScriptRenderContext> Render = ctx =>");
        builder.AppendLine("{");
        builder.AppendLine("    var scene = ctx.Scene;");
        builder.AppendLine("    scene.Reset();");
        builder.AppendLine("    var time = ctx.TimeSeconds;");
        builder.AppendLine("    var width = ctx.Width;");
        builder.AppendLine("    var height = ctx.Height;");
        builder.AppendLine();

        using var reader = new System.IO.StringReader(userSource);
        string? line;
        while ((line = reader.ReadLine()) is not null)
        {
            builder.Append("    ");
            builder.AppendLine(line);
        }

        builder.AppendLine("};");
        builder.AppendLine();
        builder.AppendLine("return Render;");

        return builder.ToString();
    }
}
