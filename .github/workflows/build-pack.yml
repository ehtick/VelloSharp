name: Build and Pack

on:
  workflow_call:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  native-linux:
    name: Native Linux (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            rid: linux-x64
            artifact-name: native-linux-x64
            library: libvello_ffi.so
          - target: aarch64-unknown-linux-gnu
            rid: linux-arm64
            artifact-name: native-linux-arm64
            library: libvello_ffi.so
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y g++-aarch64-linux-gnu

      - name: Build native artifact
        run: ./scripts/build-native-linux.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-macos:
    name: Native macOS (${{ matrix.rid }})
    runs-on: macos-14
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            rid: osx-x64
            artifact-name: native-macos-x64
            library: libvello_ffi.dylib
            sdk: ""
          - target: aarch64-apple-darwin
            rid: osx-arm64
            artifact-name: native-macos-arm64
            library: libvello_ffi.dylib
            sdk: ""
          - target: aarch64-apple-ios
            rid: ios-arm64
            artifact-name: native-ios-arm64
            library: libvello_ffi.a
            sdk: iphoneos
          - target: x86_64-apple-ios
            rid: iossimulator-x64
            artifact-name: native-iossimulator-x64
            library: libvello_ffi.a
            sdk: iphonesimulator
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Configure Apple SDK
        if: matrix.sdk != ''
        run: echo "SDKROOT=$(xcrun --sdk ${{ matrix.sdk }} --show-sdk-path)" >> $GITHUB_ENV

      - name: Build native artifact
        run: ./scripts/build-native-macos.sh ${{ matrix.target }} release '${{ matrix.sdk }}' '${{ matrix.rid }}'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-android:
    name: Native Android (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-linux-android
            rid: android-arm64
            artifact-name: native-android-arm64
            library: libvello_ffi.so
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Android NDK
        run: |
          sudo apt-get update && sudo apt-get install -y unzip wget
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -O $RUNNER_TEMP/android-ndk.zip
          unzip -q $RUNNER_TEMP/android-ndk.zip -d $RUNNER_TEMP
          echo "ANDROID_NDK_HOME=$RUNNER_TEMP/android-ndk-r26d" >> $GITHUB_ENV
          echo "$RUNNER_TEMP/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build native artifact
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: ./scripts/build-native-android.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-wasm:
    name: Native WASM (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: wasm32-unknown-unknown
            rid: browser-wasm
            artifact-name: native-wasm
            library: vello_ffi.wasm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build native artifact
        run: ./scripts/build-native-wasm.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-windows:
    name: Native Windows (${{ matrix.rid }})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            rid: win-x64
            artifact-name: native-windows-x64
          - target: aarch64-pc-windows-msvc
            rid: win-arm64
            artifact-name: native-windows-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build native artifact
        shell: pwsh
        run: ./scripts/build-native-windows.ps1 ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  collect-native-nugets:
    name: Pack Native NuGets
    runs-on: ubuntu-latest
    needs:
      - native-linux
      - native-macos
      - native-android
      - native-wasm
      - native-windows
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native runtimes
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          path: artifacts/downloaded
          merge-multiple: false

      - name: Collect native runtimes
        run: ./scripts/collect-native-artifacts.sh artifacts/downloaded artifacts/runtimes

      - name: List collected runtimes
        run: ls -R artifacts/runtimes

      - name: Copy runtimes into packaging projects
        run: ./scripts/copy-runtimes.sh artifacts/runtimes

      - name: Pack native runtime packages
        run: ./scripts/pack-native-nugets.sh artifacts/runtimes artifacts/nuget

      - name: List native packages
        run: ls -R artifacts/nuget

      - name: Upload native NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: native-nuget-packages
          path: artifacts/nuget
          if-no-files-found: error

  pack-managed-linux:
    name: Pack Managed NuGet (Linux)
    runs-on: ubuntu-latest
    needs:
      - collect-native-nugets
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: native-nuget-packages
          path: artifacts/nuget

      - name: List native NuGet packages
        run: ls -R artifacts/nuget

      - name: Pack managed NuGet packages (Linux)
        run: ./scripts/pack-managed-nugets.sh artifacts/nuget artifacts/nuget --profile linux

      - name: Upload NuGet packages (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-linux
          path: artifacts/nuget
          if-no-files-found: error

  pack-managed-windows:
    name: Pack Managed NuGet (Windows)
    runs-on: windows-latest
    needs:
      - collect-native-nugets
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: native-nuget-packages
          path: artifacts/nuget

      - name: Restore Windows workloads
        shell: pwsh
        run: |
          $gitBash = Join-Path ${Env:ProgramFiles} 'Git\bin\bash.exe'
          if (-not (Test-Path $gitBash)) {
            $gitBash = Join-Path ${Env:ProgramFiles(x86)} 'Git\bin\bash.exe'
          }
          if (-not (Test-Path $gitBash)) {
            throw "Unable to locate Git Bash (expected at '%ProgramFiles%\Git\bin\bash.exe')."
          }

          $bashCommand = "./scripts/pack-managed-nugets.sh --profile windows --print-projects"
          $projectOutput = & $gitBash -lc $bashCommand
          $projects = $projectOutput -split "`n" | Where-Object { $_.Trim() }
          foreach ($project in $projects) {
            dotnet workload restore --project $project
          }

      - name: Pack managed NuGet packages (Windows)
        shell: bash
        run: ./scripts/pack-managed-nugets.sh artifacts/nuget artifacts/nuget --profile windows

      - name: Upload NuGet packages (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-windows
          path: artifacts/nuget
          if-no-files-found: error

  pack-managed-merge:
    name: Assemble Managed NuGets
    runs-on: ubuntu-latest
    needs:
      - pack-managed-linux
      - pack-managed-windows
    steps:
      - name: Prepare workspace
        run: |
          mkdir -p artifacts/nuget/linux
          mkdir -p artifacts/nuget/windows
          mkdir -p artifacts/nuget/all

      - name: Download Linux managed packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages-linux
          path: artifacts/nuget/linux

      - name: Download Windows managed packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages-windows
          path: artifacts/nuget/windows

      - name: Combine managed packages
        run: |
          rsync -a --ignore-existing artifacts/nuget/linux/ artifacts/nuget/all/ || true
          rsync -a artifacts/nuget/windows/ artifacts/nuget/all/ || true
          ls -R artifacts/nuget/all

      - name: Upload consolidated NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget/all
          if-no-files-found: error

  winui-uwp-validation:
    name: WinUI & UWP Validation
    needs:
      - pack-managed-merge
    runs-on: windows-latest
    env:
      BUILD_CONFIGURATION: Release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Install WinAppDriver
        shell: pwsh
        run: choco install winappdriver --version=1.2.1 -y

      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget

      - name: List packaged artifacts
        shell: pwsh
        run: Get-ChildItem -Recurse -Path artifacts/nuget

      - name: Configure local NuGet source
        shell: pwsh
        run: |
          $sourcePath = (Resolve-Path "artifacts/nuget").ProviderPath
          dotnet nuget remove source VelloNativeLocal --configfile NuGet.Config > $null 2>&1
          dotnet nuget add source $sourcePath --name VelloNativeLocal --configfile NuGet.Config

      - name: Restore Windows App SDK workloads
        shell: pwsh
        run: |
          dotnet workload restore --project bindings/VelloSharp.WinUI/VelloSharp.WinUI.csproj
          dotnet workload restore --project bindings/VelloSharp.Uwp/VelloSharp.Uwp.csproj

      - name: Start WinAppDriver
        shell: pwsh
        run: |
          $candidatePaths = @(
            "$Env:ProgramFiles\Windows Application Driver\WinAppDriver.exe",
            "${Env:ProgramFiles(x86)}\Windows Application Driver\WinAppDriver.exe"
          )
          $executable = $candidatePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $executable) {
            throw "Unable to locate WinAppDriver.exe after installation."
          }
          $process = Start-Process -FilePath $executable -WindowStyle Hidden -PassThru
          $process.Id | Out-File -FilePath winappdriver.pid -Encoding ascii
          Start-Sleep -Seconds 5

      - name: Build WinUI and UWP bindings
        shell: pwsh
        run: |
          dotnet build bindings/VelloSharp.WinUI/VelloSharp.WinUI.csproj -c $env:BUILD_CONFIGURATION --no-restore
          dotnet build bindings/VelloSharp.Uwp/VelloSharp.Uwp.csproj -c $env:BUILD_CONFIGURATION --no-restore

      - name: Build sample applications
        shell: pwsh
        run: |
          dotnet build samples/WinUIVelloGallery/WinUIVelloGallery.csproj -c $env:BUILD_CONFIGURATION --no-restore
          dotnet build samples/UwpVelloGallery/UwpVelloGallery.csproj -c $env:BUILD_CONFIGURATION --no-restore

      - name: Extract WinUI & UWP packages
        shell: pwsh
        run: |
          $extractRoot = Join-Path (Get-Location) 'artifacts\extracted'
          New-Item -ItemType Directory -Path $extractRoot -Force | Out-Null

          $winuiPackage = Get-ChildItem 'artifacts/nuget' -Filter 'VelloSharp.WinUI*.nupkg' | Where-Object {
            $_.Extension -eq '.nupkg' -and $_.Name -notlike '*.symbols.*' -and $_.Name -notlike '*.snupkg'
          } | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $winuiPackage) {
            throw "VelloSharp.WinUI package not found under artifacts/nuget."
          }
          $winuiExtract = Join-Path $extractRoot 'winui'
          Expand-Archive -Path $winuiPackage.FullName -DestinationPath $winuiExtract -Force

          $uwpPackage = Get-ChildItem 'artifacts/nuget' -Filter 'VelloSharp.Uwp*.nupkg' | Where-Object {
            $_.Extension -eq '.nupkg' -and $_.Name -notlike '*.symbols.*' -and $_.Name -notlike '*.snupkg'
          } | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $uwpPackage) {
            throw "VelloSharp.Uwp package not found under artifacts/nuget."
          }
          $uwpExtract = Join-Path $extractRoot 'uwp'
          Expand-Archive -Path $uwpPackage.FullName -DestinationPath $uwpExtract -Force

      - name: Verify WinUI native assets
        shell: pwsh
        run: |
          $bundle = Join-Path (Get-Location) 'artifacts\extracted\winui'
          ./scripts/verify-winui-native-assets.ps1 -BundlePath $bundle -RuntimeIdentifier win-x64 -AllowUnsigned
          ./scripts/verify-winui-native-assets.ps1 -BundlePath $bundle -RuntimeIdentifier win-arm64 -AllowUnsigned

      - name: Verify UWP native assets
        shell: pwsh
        run: |
          $bundle = Join-Path (Get-Location) 'artifacts\extracted\uwp'
          ./scripts/verify-uwp-native-assets.ps1 -BundlePath $bundle -RuntimeIdentifier win10-x64 -AllowUnsigned
          ./scripts/verify-uwp-native-assets.ps1 -BundlePath $bundle -RuntimeIdentifier win10-arm64 -AllowUnsigned

      - name: Run WinUI/UWP UI smoke tests
        shell: pwsh
        run: |
          $resultsDir = Join-Path (Get-Location) 'artifacts\test-results'
          New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
          dotnet test tests/VelloSharp.Windows.UiSmokeTests/VelloSharp.Windows.UiSmokeTests.csproj `
            -c $env:BUILD_CONFIGURATION `
            --no-build `
            --logger "trx;LogFileName=winui-uwp-smoke.trx" `
            --results-directory $resultsDir

      - name: Stop WinAppDriver
        if: always()
        shell: pwsh
        run: |
          if (Test-Path winappdriver.pid) {
            $pid = Get-Content winappdriver.pid | Select-Object -First 1
            if ($pid) {
              Stop-Process -Id [int]$pid -Force -ErrorAction SilentlyContinue
            }
          }
          Get-Process -Name WinAppDriver -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue

      - name: Publish smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: winui-uwp-smoke-tests
          path: artifacts/test-results
          if-no-files-found: ignore

  integration-managed:
    name: Managed Integrations (${{ matrix.os }})
    needs:
      - pack-managed-merge
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            managed-command: ./scripts/run-integration-tests.sh --configuration Release --platform linux --managed-only
          - os: macos-14
            platform: macos
            managed-command: ./scripts/run-integration-tests.sh --configuration Release --platform macos --managed-only
          - os: windows-latest
            platform: windows
            managed-command: ./scripts/run-integration-tests.ps1 -Configuration Release -Platform windows -ManagedOnly
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget

      - name: List packaged artifacts (bash)
        if: runner.os != 'Windows'
        run: ls -R artifacts/nuget
        shell: bash

      - name: List packaged artifacts (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Get-ChildItem -Recurse -Path artifacts/nuget

      - name: Configure local package source (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          dotnet nuget remove source VelloNativeLocal --configfile NuGet.Config || true
          dotnet nuget add source "$(pwd)/artifacts/nuget" --name VelloNativeLocal --configfile NuGet.Config

      - name: Configure local package source (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $sourcePath = (Resolve-Path "artifacts/nuget").ProviderPath
          dotnet nuget remove source VelloNativeLocal --configfile NuGet.Config > $null 2>&1
          dotnet nuget add source $sourcePath --name VelloNativeLocal --configfile NuGet.Config

      - name: Run managed integration tests (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: ${{ matrix.managed-command }}

      - name: Run managed integration tests (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ${{ matrix.managed-command }}

  integration-native:
    name: Native Integrations (${{ matrix.os }})
    needs:
      - pack-managed-merge
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            native-command: ./scripts/run-integration-tests.sh --configuration Release --platform linux --native-only
          - os: macos-14
            platform: macos
            native-command: ./scripts/run-integration-tests.sh --configuration Release --platform macos --native-only
          - os: windows-latest
            platform: windows
            native-command: ./scripts/run-integration-tests.ps1 -Configuration Release -Platform windows -NativeOnly
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget

      - name: List packaged artifacts (bash)
        if: runner.os != 'Windows'
        run: ls -R artifacts/nuget
        shell: bash

      - name: List packaged artifacts (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Get-ChildItem -Recurse -Path artifacts/nuget

      - name: Configure local package source (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          dotnet nuget remove source VelloNativeLocal --configfile NuGet.Config || true
          dotnet nuget add source "$(pwd)/artifacts/nuget" --name VelloNativeLocal --configfile NuGet.Config

      - name: Configure local package source (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $sourcePath = (Resolve-Path "artifacts/nuget").ProviderPath
          dotnet nuget remove source VelloNativeLocal --configfile NuGet.Config > $null 2>&1
          dotnet nuget add source $sourcePath --name VelloNativeLocal --configfile NuGet.Config

      - name: Run native integration tests (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: ${{ matrix.native-command }}

      - name: Run native integration tests (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ${{ matrix.native-command }}
