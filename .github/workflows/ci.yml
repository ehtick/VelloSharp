name: Build and Pack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  native-linux:
    name: Native Linux (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            rid: linux-x64
            artifact-name: native-linux-x64
            library: libvello_ffi.so
          - target: aarch64-unknown-linux-gnu
            rid: linux-arm64
            artifact-name: native-linux-arm64
            library: libvello_ffi.so
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y g++-aarch64-linux-gnu

      - name: Build native artifact
        run: ./scripts/build-native-linux.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-macos:
    name: Native macOS (${{ matrix.rid }})
    runs-on: macos-14
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            rid: osx-x64
            artifact-name: native-macos-x64
            library: libvello_ffi.dylib
            sdk: ""
          - target: aarch64-apple-darwin
            rid: osx-arm64
            artifact-name: native-macos-arm64
            library: libvello_ffi.dylib
            sdk: ""
          - target: aarch64-apple-ios
            rid: ios-arm64
            artifact-name: native-ios-arm64
            library: libvello_ffi.a
            sdk: iphoneos
          - target: x86_64-apple-ios
            rid: iossimulator-x64
            artifact-name: native-iossimulator-x64
            library: libvello_ffi.a
            sdk: iphonesimulator
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Configure Apple SDK
        if: matrix.sdk != ''
        run: echo "SDKROOT=$(xcrun --sdk ${{ matrix.sdk }} --show-sdk-path)" >> $GITHUB_ENV

      - name: Build native artifact
        run: ./scripts/build-native-macos.sh ${{ matrix.target }} release '${{ matrix.sdk }}' '${{ matrix.rid }}'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-android:
    name: Native Android (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-linux-android
            rid: android-arm64
            artifact-name: native-android-arm64
            library: libvello_ffi.so
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Android NDK
        run: |
          sudo apt-get update && sudo apt-get install -y unzip wget
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -O $RUNNER_TEMP/android-ndk.zip
          unzip -q $RUNNER_TEMP/android-ndk.zip -d $RUNNER_TEMP
          echo "ANDROID_NDK_HOME=$RUNNER_TEMP/android-ndk-r26d" >> $GITHUB_ENV
          echo "$RUNNER_TEMP/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build native artifact
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: ./scripts/build-native-android.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-wasm:
    name: Native WASM (${{ matrix.rid }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: wasm32-unknown-unknown
            rid: browser-wasm
            artifact-name: native-wasm
            library: vello_ffi.wasm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build native artifact
        run: ./scripts/build-native-wasm.sh ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  native-windows:
    name: Native Windows (${{ matrix.rid }})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            rid: win-x64
            artifact-name: native-windows-x64
          - target: aarch64-pc-windows-msvc
            rid: win-arm64
            artifact-name: native-windows-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build native artifact
        shell: pwsh
        run: ./scripts/build-native-windows.ps1 ${{ matrix.target }} release ${{ matrix.rid }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: artifacts/runtimes/${{ matrix.rid }}
          if-no-files-found: error

  pack-native:
    name: Pack Native NuGets
    runs-on: ubuntu-latest
    needs:
      - native-linux
      - native-macos
      - native-android
      - native-wasm
      - native-windows
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          path: artifacts
          merge-multiple: true

      - name: Normalize native artifact layout
        run: |
          set -eo pipefail
          if [ -d artifacts/artifacts ]; then
            shopt -s dotglob
            mv artifacts/artifacts/* artifacts/
            rmdir artifacts/artifacts
          fi
          if [ ! -d artifacts/runtimes ]; then
            for candidate in artifacts/*; do
              if [ -d "$candidate/runtimes" ]; then
                echo "Merging runtimes from $candidate"
                shopt -s dotglob
                mkdir -p artifacts/runtimes
                cp -a "$candidate/runtimes"/. artifacts/runtimes/
                shopt -u dotglob
              fi
            done
          fi
          ls -R artifacts

      - name: Copy runtimes into projects
        run: ./scripts/copy-runtimes.sh artifacts/runtimes

      - name: Pack native runtime packages
        run: ./scripts/pack-native-nugets.sh artifacts/runtimes artifacts/nuget

      - name: List native packages
        run: ls artifacts/nuget

      - name: Upload native NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: native-nuget-packages
          path: artifacts/nuget
          if-no-files-found: error

  pack-managed:
    name: Pack NuGet
    runs-on: ubuntu-latest
    needs:
      - pack-native
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: native-nuget-packages
          path: artifacts/nuget

      - name: List native NuGet packages
        run: ls -R artifacts/nuget

      - name: Pack managed NuGet packages
        run: ./scripts/pack-managed-nugets.sh artifacts/nuget artifacts/nuget

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/nuget
          if-no-files-found: error
